import numpy as np
import librosa
import matplotlib.pyplot as plt

# Load an audio file as a numpy array
file_path = 'RobertKirchner5-15-2023.m4a'
audio_time_series, sampling_rate = librosa.load(file_path, sr=None)

# Perform the Fourier Transform to get the frequency domain representation
fft_result = np.fft.fft(audio_time_series)
fft_magnitude = np.abs(fft_result)  # Magnitudes of the FFT
fft_frequency = np.fft.fftfreq(len(fft_magnitude), 1 / sampling_rate)  # Frequencies

# Only take the first half of the spectrum (since it's mirrored about the Nyquist frequency)
half_len = len(fft_magnitude) // 2
fft_magnitude = fft_magnitude[:half_len]
fft_frequency = fft_frequency[:half_len]

# Example: Print the frequency and amplitude of the first few components
for freq, mag in zip(fft_frequency[:10], fft_magnitude[:10]):
    print(f"Frequency: {freq:.2f} Hz, Amplitude: {mag:.2f}")

# Optionally, plot the spectrum
plt.figure(figsize=(10, 6))
plt.plot(fft_frequency, fft_magnitude)
plt.title('Frequency Spectrum')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.xlim(0, sampling_rate / 2)  # Limit x-axis to half the sampling rate
plt.show()
